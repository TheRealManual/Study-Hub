// Amplify configuration and authentication
import { Amplify } from 'aws-amplify';
import { Auth } from 'aws-amplify/auth';
import { DataStore } from 'aws-amplify/datastore';
import { Storage } from 'aws-amplify/storage';

// This will be auto-generated by Amplify CLI
import awsconfig from './src/aws-exports.js';
Amplify.configure(awsconfig);

class StudyHubAuth {
    constructor() {
        this.currentUser = null;
        this.isAuthenticated = false;
    }

    async signUp(username, email, password) {
        try {
            const result = await Auth.signUp({
                username,
                password,
                attributes: {
                    email,
                    name: username
                }
            });
            return { success: true, user: result.user, requiresConfirmation: !result.isSignUpComplete };
        } catch (error) {
            console.error('Sign up error:', error);
            return { success: false, error: error.message };
        }
    }

    async confirmSignUp(username, code) {
        try {
            await Auth.confirmSignUp(username, code);
            return { success: true };
        } catch (error) {
            console.error('Confirmation error:', error);
            return { success: false, error: error.message };
        }
    }

    async signIn(username, password) {
        try {
            const user = await Auth.signIn(username, password);
            this.currentUser = user;
            this.isAuthenticated = true;
            await this.loadUserData();
            return { success: true, user };
        } catch (error) {
            console.error('Sign in error:', error);
            return { success: false, error: error.message };
        }
    }

    async signOut() {
        try {
            await Auth.signOut();
            this.currentUser = null;
            this.isAuthenticated = false;
            return { success: true };
        } catch (error) {
            console.error('Sign out error:', error);
            return { success: false, error: error.message };
        }
    }

    async getCurrentUser() {
        try {
            const user = await Auth.currentAuthenticatedUser();
            this.currentUser = user;
            this.isAuthenticated = true;
            return user;
        } catch (error) {
            this.currentUser = null;
            this.isAuthenticated = false;
            return null;
        }
    }

    async loadUserData() {
        if (!this.isAuthenticated) return null;
        
        try {
            // Load user's study data from DataStore
            const userProfile = await DataStore.query(UserProfile, this.currentUser.username);
            return userProfile;
        } catch (error) {
            console.error('Error loading user data:', error);
            return null;
        }
    }

    async syncLocalDataToCloud(localData) {
        if (!this.isAuthenticated) return false;

        try {
            // Create user profile if it doesn't exist
            let userProfile = await DataStore.query(UserProfile, this.currentUser.username);
            if (!userProfile) {
                userProfile = await DataStore.save(new UserProfile({
                    username: this.currentUser.username,
                    email: this.currentUser.attributes.email
                }));
            }

            // Sync classes, topics, and content
            for (const [className, classData] of Object.entries(localData)) {
                await this.syncClassData(userProfile.id, className, classData);
            }

            return true;
        } catch (error) {
            console.error('Error syncing data to cloud:', error);
            return false;
        }
    }

    async syncClassData(userID, className, classData) {
        try {
            // Create or update class
            let userClass = await DataStore.query(UserClass, c => c.userID('eq', userID).className('eq', className));
            if (!userClass || userClass.length === 0) {
                userClass = await DataStore.save(new UserClass({
                    userID,
                    className,
                    title: classData.title || className
                }));
            } else {
                userClass = userClass[0];
            }

            // Sync topics
            for (const [topicName, topicData] of Object.entries(classData.topics || {})) {
                await this.syncTopicData(userClass.id, topicName, topicData);
            }
        } catch (error) {
            console.error('Error syncing class data:', error);
        }
    }

    async syncTopicData(classID, topicName, topicData) {
        try {
            // Create or update topic
            let userTopic = await DataStore.query(UserTopic, t => t.classID('eq', classID).topicName('eq', topicName));
            if (!userTopic || userTopic.length === 0) {
                userTopic = await DataStore.save(new UserTopic({
                    classID,
                    topicName,
                    title: topicData.title || topicName
                }));
            } else {
                userTopic = userTopic[0];
            }

            // Sync flashcards
            if (topicData.flashcards) {
                for (const flashcard of topicData.flashcards) {
                    await DataStore.save(new UserFlashcard({
                        topicID: userTopic.id,
                        front: flashcard.front,
                        back: flashcard.back,
                        reviewCount: flashcard.reviewCount || 0,
                        source: flashcard.source
                    }));
                }
            }

            // Sync quiz questions
            if (topicData.quiz) {
                for (const question of topicData.quiz) {
                    await DataStore.save(new UserQuizQuestion({
                        topicID: userTopic.id,
                        question: question.question,
                        options: question.options,
                        correctAnswer: question.correctAnswer,
                        explanation: question.explanation,
                        source: question.source
                    }));
                }
            }

            // Sync games and notes similarly...
        } catch (error) {
            console.error('Error syncing topic data:', error);
        }
    }
}

// Export for use in main application
window.StudyHubAuth = StudyHubAuth;